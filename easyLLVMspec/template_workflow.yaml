workflow:
  # 1. inherit add & exclude attributes
  
  # available values:
  # all: inherit all
  # nil: inherit nothing
  # <regex>: inherit all files matching the regex
  # <regex_list>: inherit all files matching the regex list
  # if a "<inherit>" is specified, it will expand as what it inherits
  unit_add_inherit: all
  unit_exclude_inherit: nil

  # All the settings below will never be inherited by the child.
  # This option will omit unit_exclude_inherit. 
  unit_add: nil # auto-detect compileable files
  # unit_add: path/to/file.cpp # specify a single file to be added
  # unit_add: path/to/dir/ # specify a directory to be added
  # unit_add: 
  #   - path/to/file.cpp
  #   - path/to/dir/ # specify multiple files or directories to be added

  # If a file is both in unit_add and unit_exclude, it will be excluded.
  # This option will apply on unit_add_inherit & unit_add
  unit_exclude: nil # no need to exclude any files
  # unit_exclude: path/to/file.cpp # specify a single file to be excluded
  # unit_exclude: path/to/dir/ # specify a directory to be excluded
  # unit_exclude: 
  #   - path/to/file.cpp
  #   - path/to/dir/ # specify multiple files or directories to be excluded
  # unit_exclude: all # exclude all files

  # final avaiable files:
  # unit_add_inherit - unit_exclude_inherit + unit_add - unit_exclude


  # TODO: process_override and customize
  # default: if process_sequence is not specified, use the default sequence
  process_sequence_default:
    - frontend # Parse source code into AST, perform semantic analysis, and generate IR
    - override # Override the settings in the frontend
    - optimize # Perform LLVM optimization passes
    - llvm_link # Link LLVM IR together
    - optimize # Perform LLVM optimization passes
    - lower  # Generate target-specific machine code from IR
    - target_link # Link object files and libraries
    - done     # For demo, this is the last stage
